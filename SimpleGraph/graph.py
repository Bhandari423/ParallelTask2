newGraph = "newGraph.sqlite"
import database as db

db.initialize(newGraph)
db.atomic(newGraph, db.add_node({'name': 'A',}, 1))
db.atomic(newGraph, db.add_node({'name': 'B',}, 2))
db.atomic(newGraph, db.add_node({'name': 'C',}, 3))
db.atomic(newGraph, db.add_node({'name': 'D',}, 4))
db.atomic(newGraph, db.add_node({'name': 'E',}, 5))
db.atomic(newGraph, db.add_node({'name': 'F',}, 6))
db.atomic(newGraph, db.add_node({'name': 'G',}, 7))
db.atomic(newGraph, db.add_node({'name': 'H',}, 8))
db.atomic(newGraph, db.add_node({'name': 'I',}, 9))

db.atomic(newGraph, db.connect_nodes(1, 2, {'value': 1})) 
db.atomic(newGraph, db.connect_nodes(1, 3, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(1, 5, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(1, 7, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(2, 1, {'value': 1})) 
db.atomic(newGraph, db.connect_nodes(2, 2, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(2, 5, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(2, 6, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(2, 8, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(2, 9, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(3, 1, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(3, 5, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(3, 6, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(3, 7, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(3, 9, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(4, 1, {'value': 1})) 
db.atomic(newGraph, db.connect_nodes(4, 2, {'value': 1})) 
db.atomic(newGraph, db.connect_nodes(4, 3, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(4, 5, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(4, 7, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(4, 8, {'value': 1})) 
db.atomic(newGraph, db.connect_nodes(5, 2, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(5, 5, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(5, 6, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(5, 8, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(5, 9, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(6, 1, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(6, 6, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(6, 7, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(6, 8, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(7, 4, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(7, 7, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(8, 1, {'value': 1})) 
db.atomic(newGraph, db.connect_nodes(8, 3, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(8, 4, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(8, 5, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(8, 6, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(8, 9, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(9, 1, {'value': 1})) 
db.atomic(newGraph, db.connect_nodes(9, 2, {'value': 1})) 
db.atomic(newGraph, db.connect_nodes(9, 3, {'value': 1}))
db.atomic(newGraph, db.connect_nodes(9, 4, {'value': 1}))

# A:1,D:4,E:5
res1 = db.traverse(newGraph, 1, [4,5], neighbors_fn=db.find_neighbors)
db.visualize(newGraph, 'newGraph.dot', res1, exclude_node_keys=['value'], hide_edge_key=True)

# I:9
res2 = db.traverse(newGraph, 9, neighbors_fn=db.find_outbound_neighbors)
db.visualize(newGraph, 'newGraph2.dot', res2,exclude_node_keys=['value'], hide_edge_key=True)
